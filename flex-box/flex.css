/* Вирівнює елемент по правому краю */

http://flexboxfroggy.com/  */

#pond {
    display: flex;
	justify-content: flex-end;
}

/* Вирівнює елемент по центру */

#pond {
    display: flex;
	justify-content: center;
}

/* Вирівнює елементи з однаковими розмірами навколо них */

#pond {
    display: flex;
	justify-content: space-around;
}

/* Вирівнює елементи з однаковими розмірами між ними */

#pond {
    display: flex;
	justify-content: space-between;
}

Now use align-items to help the frogs get to the bottom of the pond. This CSS property aligns items vertically and accepts the following values:

flex-start: Items align to the top of the container.
flex-end: Items align to the bottom of the container.
center: Items align at the vertical center of the container.
baseline: Items display at the baseline of the container.
stretch: Items are stretched to fit the container.



/* justify-content: Вирівнює елементи по горизонталі, по низу контейнера */

#pond {
    display: flex;
	justify-content: flex-end;
}

/* Вирівнює контент по центру контейнера, сторінки */

#pond {
	  display: flex;

	justify-content: center;
	align-items: center;
}

The frogs need to get in the same order as their lilypads using flex-direction. This CSS property defines the direction items are placed in the container, and accepts the following values:

row: Items are placed the same as the text direction.
row-reverse: Items are placed opposite to the text direction.
column: Items are placed top to bottom.
column-reverse: Items are placed bottom to top.

/* виводить елементи по вертикалі */

#pond {
	  display: flex;

	flex-direction: column;
}

/* ! Тут вирівнює зліва, але при цьому міняє елементи місцями. */

#pond {
  display: flex;

	flex-direction: row-reverse;
	justify-content: flex-end;
}


/* Тут flex-direction: column; повертає елементи по вертикалі і justify-content: flex-end; опускає вниз

Notice that when the flex direction is a column,
 justify-content changes to the vertical and align-items to the horizontal. */


#pond {
  display: flex;
	flex-direction: column;
	justify-content: flex-end;
}

/* order: 1; - застосову.ться до одного елементу і тут значить порядок тут 1, по замовчуванню 0
	тобто спочатку будуть елементи з індексом 0, а потім 1 і т.д. можна задавати мінусові елементи  */

#pond {
  display: flex;
}

.yellow {
	order: 1;
}


/* тут застосовується вирівнювання до одного елементу, відносно інших в середині контейнеру */

#pond {
  display: flex;
  align-items: flex-start;
}

.yellow {
	align-self: flex-end;
}

!!!! не поняв
Oh no! The frogs are all squeezed onto a single row of lilypads. 
Spread them out using the flex-wrap property, which accepts the following values:

nowrap: Every item is fit to a single line.
wrap: Items wrap around to additional lines.  (Я так зрозумів, щоб елементи не налазили один на одного, 
	якщо не вміщаються)
wrap-reverse: Items wrap around to additional lines in reverse.





----------------------------------------------

/* тут flex-flow поєднує flex-wrap і  flex-direction */

#pond {
  display: flex;
	flex-flow: column wrap
}


use align-content to set how multiple lines are spaced apart from each other. 
This property takes the following values:

flex-start: Lines are packed at the top of the container.
flex-end: Lines are packed at the bottom of the container.
center: Lines are packed at the vertical center of the container.
space-between: Lines display with equal spacing between them.
space-around: Lines display with equal spacing around them.
stretch: Lines are stretched to fit the container.

Вирівнює лінії.


Всі властивості:

justify-content
align-items
flex-direction
order
align-self
flex-wrap
flex-flow
align-content